// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                  @id @default(autoincrement())
  email             String               @unique
  password          String
  nickname          String
  oauthInfo         OauthInfo[]
  favoriteEarnings  FavoriteEarnings[]
  favoriteDividends FavoriteDividends[]
  favoriteIndicators FavoriteIndicator[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model OauthInfo {
  id           Int      @id @default(autoincrement())
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  tokenExpiry  DateTime?
  userId       Int
  user         User      @relation(fields: [userId], references: [id])

  @@index([provider, providerId], name: "provider_providerId_idx")
  @@index([userId], name: "userId_idx") // userId에 인덱스 추가
}

model Company {
  id        Int         @id @default(autoincrement())
  ticker    String
  name      String
  country   String
  earnings  Earnings[]
  dividends Dividend[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([ticker, country])  // ticker와 country를 복합 키로 설정
}

model Earnings {
  id              Int      @id @default(autoincrement())
  country         String   // 국가
  releaseDate     BigInt   // 발표 날짜 (밀리초 단위 정수 값)
  actualEPS       String   // 실제 EPS
  forecastEPS     String   // 예측 EPS
  previousEPS     String   // 이전 EPS
  actualRevenue   String   // 실제 매출
  forecastRevenue String   // 예측 매출
  previousRevenue String   // 이전 매출
  companyId       Int
  company         Company   @relation(fields: [companyId], references: [id])
  favorites       FavoriteEarnings[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([releaseDate, companyId])  // 복합 고유 키 설정
}

model Dividend {
  id              Int      @id @default(autoincrement())
  country         String   // 국가
  exDividendDate  BigInt   // 배당락일 (밀리초 단위 정수 값)
  dividendAmount  String   // 배당금
  previousDividendAmount  String // 이전 배당금
  paymentDate     BigInt   // 배당 지급일 (밀리초 단위 정수 값)
  companyId       Int
  company         Company   @relation(fields: [companyId], references: [id])
  favorites       FavoriteDividends[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([exDividendDate, companyId])  // 복합 고유 키 설정
}

model EconomicIndicator {
  id         Int      @id @default(autoincrement())
  country    String   // 국가
  releaseDate BigInt  // 발표 날짜 (밀리초 단위 정수 값)
  name       String   // 지표 이름
  importance Int      // 중요도 (1-5 스케일 등)
  actual     String   // 실제 값
  forecast   String   // 예측 값
  previous   String   // 이전 값
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  favorites  FavoriteIndicator[]

  @@unique([releaseDate, name, country])  // 복합 고유 키 설정
}

// 사용자와 실적 정보를 연결하는 중간 테이블
model FavoriteEarnings {
  userId    Int
  earningsId Int
  user      User     @relation(fields: [userId], references: [id])
  earnings  Earnings @relation(fields: [earningsId], references: [id])
  @@id([userId, earningsId])
}

// 사용자와 배당 정보를 연결하는 중간 테이블
model FavoriteDividends {
  userId     Int
  dividendId Int
  user       User     @relation(fields: [userId], references: [id])
  dividend   Dividend @relation(fields: [dividendId], references: [id])
  @@id([userId, dividendId])
}

// 사용자와 경제 지표를 연결하는 중간 테이블
model FavoriteIndicator {
  userId     Int
  indicatorId Int
  user       User               @relation(fields: [userId], references: [id])
  indicator  EconomicIndicator  @relation(fields: [indicatorId], references: [id])
  @@id([userId, indicatorId])
}
